//=============================================================================
//
// 爆発 [explosion.cpp]
// Author : Hiroya Katano
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "explosion.h" 
#include "renderer.h"
#include "manager.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************


//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CExplosion::m_pTexture = NULL;			// テクスチャ

//*****************************************************************************
// コンストラクタ
//*****************************************************************************
CExplosion::CExplosion(int nPriority) : CScene2D(nPriority)
{
	m_scale = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_nPatternAnim = 0;
	m_nCounterAnim = 0;
}

//*****************************************************************************
// デストラクタ
//*****************************************************************************
CExplosion::~CExplosion()
{


}

//*****************************************************************************
// ポリゴンの初期化処理
//*****************************************************************************
HRESULT CExplosion::Init(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	//大きさを設定
	m_scale = scale;

	//CScene2Dを呼び出し
	CScene2D::Init(pos, scale);

	CScene2D::SetExplosionTex(0);

	return S_OK;
}

//*****************************************************************************
// ポリゴンの終了処理
//*****************************************************************************
void CExplosion::Uninit()
{
	CScene2D::Uninit();
}

//*****************************************************************************
// ポリゴンの更新処理
//*****************************************************************************
void CExplosion::Update()
{
	//アニメーションカウンターの更新
	m_nCounterAnim++;

	//アニメ―ション処理
	if (m_nCounterAnim % 4 == 0)
	{
		//パターンNoの更新
		m_nPatternAnim += 1;

		//テクスチャの呼び出し
		CScene2D::SetExplosionTex(m_nPatternAnim);

		//パターンが一定数足された場合
		if (m_nPatternAnim > 8)
		{
			// 終了処理
			Uninit();

		}
	}
}

//*****************************************************************************
// ポリゴンの描画処理
//*****************************************************************************
void CExplosion::Draw()
{
	CScene2D::Draw();
}

//*****************************************************************************
// テクスチャ読込処理
//*****************************************************************************
void CExplosion::Load(void)
{
	//デバイスの設定
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "data\\TEXTURE\\explosion000.png", &m_pTexture);
}

//*****************************************************************************
// テクスチャ破棄処理
//*****************************************************************************
void CExplosion::Unload(void)
{
	//テクスチャの開放
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//*****************************************************************************
// 生成処理
//*****************************************************************************
CExplosion *CExplosion::Create(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	CExplosion *pExplosion = NULL;
	pExplosion = new CExplosion;

	if (pExplosion != NULL)
	{
		pExplosion->Init(pos, scale);

		pExplosion->BindTexture(m_pTexture);
	}

	return pExplosion;
}