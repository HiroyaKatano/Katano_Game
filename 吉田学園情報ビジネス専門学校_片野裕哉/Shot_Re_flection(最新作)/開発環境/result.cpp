//=============================================================================
//
// リザルト [result.cpp]
// Author : Hiroya Katano
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "result.h"
#include "bg.h"
#include "keyboard.h"
#include "manager.h"
#include "fade.h"
#include "sound.h"
#include "score.h"
#include "data.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************


//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************
CBg *CResult::m_pBg = NULL;
int CResult::m_nScore;

//*****************************************************************************
// コンストラクタ
//*****************************************************************************
CResult::CResult()
{

}

//*****************************************************************************
// デストラクタ
//*****************************************************************************
CResult::~CResult()
{


}

//*****************************************************************************
// 生成処理
//*****************************************************************************
CResult *CResult::Create()
{
	CResult *pResult = new CResult;
	D3DXVECTOR3 pos;
	D3DXVECTOR3 scale;

	// 初期化処理
	pResult->Init(pos, scale);

	return pResult;
}

//*****************************************************************************
// 初期化処理
//*****************************************************************************
HRESULT CResult::Init(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	// 背景の生成
	m_pBg = CBg::Create(D3DXVECTOR3(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 0.0f), D3DXVECTOR3(SCREEN_WIDTH, SCREEN_HEIGHT, 0.0f));
	// スコアの生成
	m_pScore = CScore::Create(D3DXVECTOR3(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 0.0f), D3DXVECTOR3(50.0f, 100.0f, 0.0f));

	CSound *pSound = CManager::GetSound();
	pSound->Play(CSound::SOUND_LABEL_BGM000);

	return S_OK;
}

//*****************************************************************************
// 終了処理
//*****************************************************************************
void CResult::Uninit()
{
	CSound *pSound = CManager::GetSound();
	pSound->Stop(CSound::SOUND_LABEL_BGM000);

	Release();
}

//*****************************************************************************
// 更新処理
//*****************************************************************************
void CResult::Update()
{
	// キーボードの取得
	CInputKeyboard *pKeyboard = CManager::GetInputKeyboard();

	m_nScore = CData::GetScore();
	m_pScore->SetScore(m_nScore);

	if (pKeyboard->GetTrigger(DIK_RETURN) == true)
	{
		//CManager::GetFade()->SetFade(CFade::FADE_OUT, CManager::MODE_GAME);
		CManager::SetMode(CManager::MODE_TITLE);
	}
}

//*****************************************************************************
// 描画処理
//*****************************************************************************
void CResult::Draw()
{

}
